/* privacy.vapi generated by valac 0.36.14, do not modify. */

namespace Privacy {
	namespace Backends {
		[CCode (cheader_filename = "privacy.h")]
		public class Camera : Privacy.AbstractBackend {
			public Camera ();
			public override void added ();
			public override Gtk.Widget get_app_list ();
			public override void update_app_list ();
			public override string ICON_NAME { get; }
		}
		[CCode (cheader_filename = "privacy.h")]
		public class Location : Privacy.AbstractBackend {
			public Location ();
			public override void added ();
			public override Gtk.Widget get_app_list ();
			public override void update_app_list ();
			public override string ICON_NAME { get; }
		}
	}
	namespace Services {
		namespace DBusInterfaces {
		}
		namespace ProcessMonitor {
			[CCode (cheader_filename = "privacy.h")]
			public class Monitor : GLib.Object {
				public static Privacy.Services.ProcessMonitor.Monitor get_default ();
				public Privacy.Services.ProcessMonitor.Process? get_process (int pid);
				public Gee.Map<int,Privacy.Services.ProcessMonitor.Process> get_process_list ();
				public Gee.Set<int> get_sub_processes (int pid);
				public void update ();
				public signal void process_added (int pid, Privacy.Services.ProcessMonitor.Process process);
				public signal void process_removed (int pid);
				public signal void updated ();
			}
			[CCode (cheader_filename = "privacy.h")]
			public class Process : GLib.Object {
				public Process (int _pid);
				public bool update ();
				public string comm { get; private set; }
				public string command { get; private set; }
				public string? exe_name { get; private set; }
				public bool exists { get; private set; }
				public int pgrp { get; private set; }
				public int pid { get; private set; }
				public int ppid { get; private set; }
			}
		}
	}
	namespace Widgets {
		[CCode (cheader_filename = "privacy.h")]
		public class AppList : Gtk.Revealer {
			public AppList (string title);
			public void add_app (GLib.AppInfo app);
			public void add_unknown_app (string? label = null);
			public void clear_apps ();
		}
		[CCode (cheader_filename = "privacy.h")]
		public class AppListRow : Gtk.Grid {
			public AppListRow ();
			public bool equal (Privacy.Widgets.AppListRow b);
			public AppListRow.from_appinfo (GLib.AppInfo app);
			public uint hash ();
			public AppListRow.with_label (string? label_text = null);
		}
		[CCode (cheader_filename = "privacy.h")]
		public class DisplayWidget : Gtk.Box {
			public DisplayWidget ();
			public void add_backend (Privacy.AbstractBackend backend);
			public bool has_visible_icons ();
			public signal void visibility_changed ();
		}
	}
	[CCode (cheader_filename = "privacy.h")]
	public abstract class AbstractBackend {
		public AbstractBackend ();
		public abstract void added ();
		public abstract Gtk.Widget get_app_list ();
		public abstract void update_app_list ();
		public abstract string ICON_NAME { get; }
		public signal void activated ();
		public signal void apps_changed ();
		public signal void deactivated ();
	}
	[CCode (cheader_filename = "privacy.h")]
	public class Indicator : Wingpanel.Indicator {
		public Indicator ();
		public override void closed ();
		public void connections ();
		public override Gtk.Widget get_display_widget ();
		public override Gtk.Widget? get_widget ();
		public override void opened ();
	}
}
[CCode (cheader_filename = "privacy.h")]
public static Wingpanel.Indicator? get_indicator (GLib.Module module, Wingpanel.IndicatorManager.ServerType server_type);
